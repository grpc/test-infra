apiVersion: e2etest.grpc.io/v1
kind: LoadTest
metadata:
  # Every load test instance must be assigned a unique name on the
  # cluster. There are ways we can circumvent naming clashes, such
  # as using namespaces or dynamically assigning names.
  name: java-example

  # As a custom resource, it behaves like a native kubernetes object.
  # This means that users can perform CRUD operations through the
  # Kubernetes API or kubectl. In addition, it means that the user
  # can set any metadata on it.
  labels:
    language: java
spec:
  # The user can specify servers to use when running tests. The
  # initial version only supports 1 server to limit scope. Servers
  # is an array for future expansion.
  #
  # There are many designs and systems to pursue load balancing,
  # organizing and monitoring a mesh of servers. Therefore, this
  # will likely be expanded in the future.
  servers:
    - language: java
      clone:
        repo: https://github.com/grpc/grpc-java.git
        gitRef: master
      build:
        command: ["gradle"]
        args:
          [
            "-PskipAndroid=true",
            "-PskipCodegen=true",
            ":grpc-benchmarks:installDist",
          ]
      run:
        command:
          ["benchmarks/build/install/grpc-benchmarks/bin/benchmark_worker"]

  # Users can specify multiple clients. They are bound by the
  # number of nodes.
  clients:
    - language: java
      clone:
        repo: https://github.com/grpc/grpc-java.git
        gitRef: master
      build:
        command: ["gradle"]
        args:
          [
            "-PskipAndroid=true",
            "-PskipCodegen=true",
            ":grpc-benchmarks:installDist",
          ]
      run:
        command:
          ["benchmarks/build/install/grpc-benchmarks/bin/benchmark_worker"]

  # We can optionally specify where to place the results. The
  # controller will attempt to mount a service account in the driver.
  # This can be used for uploading results to GCS or BigQuery.
  # results:
  #   bigQueryTable: "example-project.foo.demo_dataset"

  # timeoutSeconds field is to advise the longest time a test
  # could possibly run, test runs longer than given value will be marked as
  # Errored and would not be allocate more resource. The field takes integer
  # and convert the supplied value to duration, the unit of duration is fixed as
  # second, for example: timeoutSeconds: 900 indicates the timeout of this test
  # is 15min. The minimum seconds one can put is 1.
  timeoutSeconds: 900

  # ttlSeconds field is to advise on how long the test should be alive on the
  # cluster, test lives longer than given value will be deleted. The field takes
  # integer and convert the supplied value to duration, the unit of
  # duration is fixed as second, for example: ttlSeconds: 86400 indicates the
  # timeout of this test is 24h. The minimum seconds one can put is 1.
  ttlSeconds: 86400

  # Scenarios are separate objects under this proposal. While
  # they specify configuration for clients and servers, they are
  # highly specialized. I doubt we want to modify controller logic
  # whenever the Scenario proto is changed. This is open to
  # discussion, however.
  #
  # These can be stored in ConfigMaps or they can be high-level
  # Kubernetes objects themselves. If we did want to couple, they
  # could also be inlined.
  scenarios:
    - name: java-example-scenario
