apiVersion: e2etest.grpc.io/v1
kind: LoadTest
metadata:
  # Every load test instance must be assigned a unique name on the
  # cluster. There are ways we can circumvent naming clashes, such
  # as using namespaces or dynamically assigning names.
  name: csharp-example

  # As a custom resource, it behaves like a native kubernetes object.
  # This means that users can perform CRUD operations through the
  # Kubernetes API or kubectl. In addition, it means that the user
  # can set any metadata on it.
  labels:
    language: csharp
spec:
  # The user can specify servers to use when running tests. The
  # initial version only supports 1 server to limit scope. Servers
  # is an array for future expansion.
  #
  # There are many designs and systems to pursue load balancing,
  # organizing and monitoring a mesh of servers. Therefore, this
  # will likely be expanded in the future.
  servers:
    - language: csharp
      clone:
        repo: https://github.com/jtattermusch/grpc.git
        # TODO(jtattermusch): we cannot use grpc/grpc master because currently C# qps_worker doesn't accept the --server_port arg
        gitRef: csharp_qpsworker_server_port
      build:
        image: gcr.io/grpc-testing/e2etest/runtime/csharp:jtattermusch-experiment20201029-2
        command: ["bash", "/build_scripts/build_qps_worker.sh"]
      run:
        image: mcr.microsoft.com/dotnet/runtime:2.1
        command: ["dotnet"]
        args: ["exec", "qps_worker/Grpc.IntegrationTesting.QpsWorker.dll"]

  # Users can specify multiple clients. They are bound by the
  # number of nodes.
  clients:
    - language: csharp
      clone:
        repo: https://github.com/jtattermusch/grpc.git
        gitRef: csharp_qpsworker_server_port
      build:
        image: gcr.io/grpc-testing/e2etest/runtime/csharp:jtattermusch-experiment20201029-2
        command: ["bash", "/build_scripts/build_qps_worker.sh"]
      run:
        image: mcr.microsoft.com/dotnet/runtime:2.1
        command: ["dotnet"]
        args: ["exec", "qps_worker/Grpc.IntegrationTesting.QpsWorker.dll"]

  # We can optionally specify where to place the results. The
  # controller will attempt to mount a service account in the driver.
  # This can be used for uploading results to GCS or BigQuery.
  # results:
  #   bigQueryTable: "example-project.foo.demo_dataset"

  # ScenariosJSON is string with the contents of a Scenarios message, formatted
  # as JSON. See the Scenarios protobuf definition for details:
  # https://github.com/grpc/grpc-proto/blob/master/grpc/testing/control.proto.
  scenariosJSON: |
    {
      "scenarios": [
        {
          "name": "csharp_protobuf_async_unary_ping_pong_1MB",
          "num_servers": 1,
          "num_clients": 1,
          "client_config": {
            "client_type": "ASYNC_CLIENT",
            "security_params": {
              "use_test_ca": true,
              "server_host_override": "foo.test.google.fr"
            },
            "outstanding_rpcs_per_channel": 1,
            "client_channels": 1,
            "async_client_threads": 1,
            "client_processes": 0,
            "threads_per_cq": 0,
            "rpc_type": "UNARY",
            "histogram_params": {
              "resolution": 0.01,
              "max_possible": 60000000000.0
            },
            "channel_args": [
              {
                "name": "grpc.optimization_target",
                "str_value": "latency"
              }
            ],
            "payload_config": {
              "simple_params": {
                "req_size": 1048576,
                "resp_size": 1048576
              }
            },
            "load_params": {
              "closed_loop": {}
            }
          },
          "server_config": {
            "server_type": "ASYNC_SERVER",
            "security_params": {
              "use_test_ca": true,
              "server_host_override": "foo.test.google.fr"
            },
            "async_server_threads": 0,
            "server_processes": 0,
            "threads_per_cq": 0,
            "channel_args": [
              {
                "name": "grpc.optimization_target",
                "str_value": "latency"
              }
            ]
          },
          "warmup_seconds": 5,
          "benchmark_seconds": 30
        }
      ]
    }
