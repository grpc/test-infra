/*
Copyright 2021 gRPC authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package runner contains code for a test runner that can run a list of
// load tests, wait for them to complete, and report on the results.
package runner

import (
	"fmt"
	"log"
	"time"

	grpcv1 "github.com/grpc/test-infra/api/v1"
)

// TestSuiteReporter manages reports for tests that share a runner queue.
type TestSuiteReporter struct {
	qName         string
	logPrefixFmt  string
	testCaseCount int
}

// NewTestSuiteReporter creates a new suite reporter instance.
// TODO: Add a report to be filled in by the reporter.
func NewTestSuiteReporter(qName string, logPrefixFmt string) *TestSuiteReporter {
	return &TestSuiteReporter{
		qName:        qName,
		logPrefixFmt: logPrefixFmt,
	}
}

// Queue returns the name of the queue containing tests for this test suite.
func (r *TestSuiteReporter) Queue() string {
	return r.qName
}

// NewTestCaseReporter creates a new reporter instance.
// TODO: Add a report to be filled in by the reporter.
func (r *TestSuiteReporter) NewTestCaseReporter(config *grpcv1.LoadTest) *TestCaseReporter {
	logPrefix := fmt.Sprintf(r.logPrefixFmt, r.qName, r.testCaseCount)
	index := r.testCaseCount
	r.testCaseCount++
	return &TestCaseReporter{
		logPrintf: func(format string, v ...interface{}) {
			log.Printf(logPrefix+format, v...)
		},
		index: index,
	}
}

// TestCaseReporter collects events for logging and reporting during a test.
type TestCaseReporter struct {
	// startTime and duration are placeholders.
	// TODO: Record startTime and duration in a report.
	startTime time.Time
	duration  time.Duration
	logPrintf func(format string, v ...interface{})
	index     int
}

// Index returns the index of the test case in the test suite (and queue).
func (r *TestCaseReporter) Index() int {
	return r.index
}

// Info records an informational message generated by the test.
func (r *TestCaseReporter) Info(format string, v ...interface{}) {
	r.logPrintf(format, v...)
}

// Warning records a warning message generated during the test.
// The error that caused the message to be generated is also included.
func (r *TestCaseReporter) Warning(format string, v ...interface{}) {
	// TODO: Record warning.
	r.logPrintf(format, v...)
}

// Error records an error message generated during the test.
// The error that caused the message to be generated is also included.
func (r *TestCaseReporter) Error(format string, v ...interface{}) {
	// TODO: Record error.
	r.logPrintf(format, v...)
}

// SetStartTime records the start time of the test.
func (r *TestCaseReporter) SetStartTime(startTime time.Time) {
	// TODO: Record startTime in a report.
	r.startTime = startTime
}

// SetEndTime records the end time of the test.
func (r *TestCaseReporter) SetEndTime(endTime time.Time) {
	// TODO: Record duration in a report.
	r.duration = endTime.Sub(r.startTime)
}

// TestDuration returns the duration of the test.
func (r *TestCaseReporter) TestDuration() time.Duration {
	return r.duration
}
